/* 
* Copyright (C) 2003-2015 eXo Platform SAS.
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program. If not, see http://www.gnu.org/licenses/ .
*/
package org.exoplatform.addons.es.dao.impl;

import org.exoplatform.addons.es.dao.IndexingOperationDAO;
import org.exoplatform.addons.es.domain.IndexingOperation;
import org.exoplatform.commons.api.persistence.ExoTransactional;
import org.exoplatform.commons.persistence.impl.GenericDAOJPAImpl;

import javax.persistence.EntityManager;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;
import java.util.Date;
import java.util.List;

/**
 * Created by The eXo Platform SAS
 * Author : Thibault Clement
 * tclement@exoplatform.com
 * 7/29/15
 */
public class IndexingOperationDAOImpl extends GenericDAOJPAImpl<IndexingOperation, Long> implements IndexingOperationDAO {


  @Override
  @ExoTransactional
  public IndexingOperation create(IndexingOperation entity) {
    EntityManager em = getEntityManager();
    em.persist(entity);
    //We need to refresh the entity to get the timestamp generated by the DB
    em.refresh(entity);
    return entity;
  }

  @Override
  @ExoTransactional
  public List<IndexingOperation> findOperationsFromLastTime(Date lastTime) {
    return getEntityManager()
            .createNamedQuery("IndexingOperation.findAllIndexingOperationsFromLastTime", IndexingOperation.class)
            .setParameter("lastTime", lastTime)
            .getResultList();
  }

  @Override
  @ExoTransactional
  public List<IndexingOperation> findOperationsBeforeLastTime(Date lastTime) {
    //TODO TEST
    return getEntityManager()
        .createNamedQuery("IndexingOperation.findAllIndexingOperationsBeforeLastTime", IndexingOperation.class)
        .setParameter("lastTime", lastTime)
        .getResultList();
  }

  @Override
  @ExoTransactional
  public List<IndexingOperation> findOperationsBeforeLastTimeByOperation(Date lastTime, String operation) {
    //TODO TEST
    return getEntityManager()
        .createNamedQuery("IndexingOperation.findAllIndexingOperationsBeforeLastTimeByOperation", IndexingOperation.class)
        .setParameter("lastTime", lastTime)
        .setParameter("operation", operation)
        .getResultList();
  }

  @Override
  @ExoTransactional
  public List<IndexingOperation> findOperationsBeforeLastTimeByOperations(Date lastTime, List<String> operations) {
    //TODO TEST
    return getEntityManager()
        .createNamedQuery("IndexingOperation.findAllIndexingOperationsBeforeLastTimeByOperations", IndexingOperation.class)
        .setParameter("lastTime", lastTime)
        .setParameter("operations", operations)
        .getResultList();
  }

  @Override
  @ExoTransactional
  public List<IndexingOperation> findAllFirst(Integer maxResults) {
      return getEntityManager()
              .createNamedQuery("IndexingOperation.findAllFirst", IndexingOperation.class)
              .setMaxResults(maxResults)
              .getResultList();
  }

  @Override
  @ExoTransactional
  public void deleteAllBefore(Date lastTime) {
    getEntityManager()
        .createNamedQuery("IndexingOperation.deleteBeforeTimestamp")
        .setParameter("lastTime", lastTime)
        .executeUpdate();
  }

}

